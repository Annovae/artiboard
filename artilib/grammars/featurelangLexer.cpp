/** \file
 *  This C++ source file was generated by $ANTLR version 3.5
 *
 *     -  From the grammar source file : artilib\\grammars\\featurelang.g
 *     -                            On : 2013-09-29 12:51:07
 *     -                 for the lexer : featurelangLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "featurelangLexer.hpp"
/* ----------------------------------------- */




/** String literals used by featurelangLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR_UCHAR	lit_1[]  = { 0x2F, 0x2F,  antlr3::ANTLR_STRING_TERMINATOR};



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

using namespace antlr3;


/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



featurelangLexer::~featurelangLexer()
{
}

void
featurelangLexer::reset()
{
    this->get_rec()->reset();
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "artilib\\grammars\\featurelang.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* featurelangLexer::getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called featurelangLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return
 *     - Success pfeaturelangLexer initialized for the lex start
 *     - Fail NULL
 */
featurelangLexer::featurelangLexer(StreamType* instream)
:featurelangLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, NULL)
{
	// See if we can create a new lexer with the standard constructor
	//
	this->init(instream );
}

/** \brief Create a new lexer called featurelangLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return
 *     - Success pfeaturelangLexer initialized for the lex start
 *     - Fail NULL
 */
featurelangLexer::featurelangLexer(StreamType* instream, RecognizerSharedStateType* state)
:featurelangLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, state)
{
	this->init(instream );
}

void featurelangLexer::init(StreamType* instream)
{
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in featurelangLexer.h here so you can get a sense
     * of what goes where.
     */

}

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 7:6: ( '!' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__8
 *
 * Looks to match the characters the constitute the token T__8
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void featurelangLexer::mT__8()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__8;


    // artilib\\grammars\\featurelang.g:7:6: ( '!' )
    // artilib\\grammars\\featurelang.g:7:8: '!'
    {
         this->matchc('!');
        if  (this->hasException())
        {
            goto ruleT__8Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__8Ex; /* Prevent compiler warnings */
    ruleT__8Ex: ;

}
// $ANTLR end T__8

//   Comes from: 8:6: ( '&' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__9
 *
 * Looks to match the characters the constitute the token T__9
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void featurelangLexer::mT__9()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__9;


    // artilib\\grammars\\featurelang.g:8:6: ( '&' )
    // artilib\\grammars\\featurelang.g:8:8: '&'
    {
         this->matchc('&');
        if  (this->hasException())
        {
            goto ruleT__9Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__9Ex; /* Prevent compiler warnings */
    ruleT__9Ex: ;

}
// $ANTLR end T__9

//   Comes from: 9:7: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__10
 *
 * Looks to match the characters the constitute the token T__10
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void featurelangLexer::mT__10()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__10;


    // artilib\\grammars\\featurelang.g:9:7: ( '(' )
    // artilib\\grammars\\featurelang.g:9:9: '('
    {
         this->matchc('(');
        if  (this->hasException())
        {
            goto ruleT__10Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__10Ex; /* Prevent compiler warnings */
    ruleT__10Ex: ;

}
// $ANTLR end T__10

//   Comes from: 10:7: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__11
 *
 * Looks to match the characters the constitute the token T__11
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void featurelangLexer::mT__11()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__11;


    // artilib\\grammars\\featurelang.g:10:7: ( ')' )
    // artilib\\grammars\\featurelang.g:10:9: ')'
    {
         this->matchc(')');
        if  (this->hasException())
        {
            goto ruleT__11Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__11Ex; /* Prevent compiler warnings */
    ruleT__11Ex: ;

}
// $ANTLR end T__11

//   Comes from: 11:7: ( '.' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__12
 *
 * Looks to match the characters the constitute the token T__12
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void featurelangLexer::mT__12()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__12;


    // artilib\\grammars\\featurelang.g:11:7: ( '.' )
    // artilib\\grammars\\featurelang.g:11:9: '.'
    {
         this->matchc('.');
        if  (this->hasException())
        {
            goto ruleT__12Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__12Ex; /* Prevent compiler warnings */
    ruleT__12Ex: ;

}
// $ANTLR end T__12

//   Comes from: 12:7: ( '@' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__13
 *
 * Looks to match the characters the constitute the token T__13
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void featurelangLexer::mT__13()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__13;


    // artilib\\grammars\\featurelang.g:12:7: ( '@' )
    // artilib\\grammars\\featurelang.g:12:9: '@'
    {
         this->matchc('@');
        if  (this->hasException())
        {
            goto ruleT__13Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__13Ex; /* Prevent compiler warnings */
    ruleT__13Ex: ;

}
// $ANTLR end T__13

//   Comes from: 13:7: ( '{' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__14
 *
 * Looks to match the characters the constitute the token T__14
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void featurelangLexer::mT__14()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__14;


    // artilib\\grammars\\featurelang.g:13:7: ( '{' )
    // artilib\\grammars\\featurelang.g:13:9: '{'
    {
         this->matchc('{');
        if  (this->hasException())
        {
            goto ruleT__14Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__14Ex; /* Prevent compiler warnings */
    ruleT__14Ex: ;

}
// $ANTLR end T__14

//   Comes from: 14:7: ( '|' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__15
 *
 * Looks to match the characters the constitute the token T__15
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void featurelangLexer::mT__15()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__15;


    // artilib\\grammars\\featurelang.g:14:7: ( '|' )
    // artilib\\grammars\\featurelang.g:14:9: '|'
    {
         this->matchc('|');
        if  (this->hasException())
        {
            goto ruleT__15Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__15Ex; /* Prevent compiler warnings */
    ruleT__15Ex: ;

}
// $ANTLR end T__15

//   Comes from: 15:7: ( '}' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__16
 *
 * Looks to match the characters the constitute the token T__16
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void featurelangLexer::mT__16()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__16;


    // artilib\\grammars\\featurelang.g:15:7: ( '}' )
    // artilib\\grammars\\featurelang.g:15:9: '}'
    {
         this->matchc('}');
        if  (this->hasException())
        {
            goto ruleT__16Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__16Ex; /* Prevent compiler warnings */
    ruleT__16Ex: ;

}
// $ANTLR end T__16

//   Comes from: 41:2: ( ( '0' .. '7' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INTEGER
 *
 * Looks to match the characters the constitute the token INTEGER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void featurelangLexer::mINTEGER()
{
    ANTLR_UINT32	_type;
      


    _type	    = INTEGER;


    // artilib\\grammars\\featurelang.g:41:2: ( ( '0' .. '7' )+ )
    // artilib\\grammars\\featurelang.g:41:4: ( '0' .. '7' )+
    {
        // artilib\\grammars\\featurelang.g:41:4: ( '0' .. '7' )+
        {
            int cnt1=0;

            for (;;)
            {
                int alt1=2;
        	switch ( this->LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        		{
        			alt1=1;
        		}
        	    break;

        	}

        	switch (alt1)
        	{
        	    case 1:
        	        // artilib\\grammars\\featurelang.g:
        	        {
        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '7')) )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< featurelangLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleINTEGEREx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt1 >= 1 )
        		{
        		    goto loop1;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< featurelangLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleINTEGEREx;
        	}
        	cnt1++;
            }
            loop1: ;	/* Jump to here if this rule does not match */
        }

    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleINTEGEREx; /* Prevent compiler warnings */
    ruleINTEGEREx: ;

}
// $ANTLR end INTEGER

//   Comes from: 44:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ID
 *
 * Looks to match the characters the constitute the token ID
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void featurelangLexer::mID()
{
    ANTLR_UINT32	_type;
      


    _type	    = ID;


    // artilib\\grammars\\featurelang.g:44:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
    // artilib\\grammars\\featurelang.g:44:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
    {
        if ( ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || this->LA(1) == '_' || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< featurelangLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleIDEx;
        }


        // artilib\\grammars\\featurelang.g:44:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*

        for (;;)
        {
            int alt2=2;
            switch ( this->LA(1) )
            {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt2=1;
            	}
                break;

            }

            switch (alt2)
            {
        	case 1:
        	    // artilib\\grammars\\featurelang.g:
        	    {
        	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || this->LA(1) == '_' || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< featurelangLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleIDEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop2;	/* break out of the loop */
        	    break;
            }
        }
        loop2: ; /* Jump out to here if this rule does not match */


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleIDEx; /* Prevent compiler warnings */
    ruleIDEx: ;

}
// $ANTLR end ID

//   Comes from: 48:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMENT
 *
 * Looks to match the characters the constitute the token COMMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void featurelangLexer::mCOMMENT()
{
    ANTLR_UINT32	_type;
      


    _type	    = COMMENT;


    // artilib\\grammars\\featurelang.g:48:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )
    // artilib\\grammars\\featurelang.g:48:9: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
    {
        this->matchs(lit_1);
        if  (this->hasException())
        {
            goto ruleCOMMENTEx;
        }




        // artilib\\grammars\\featurelang.g:48:14: (~ ( '\\n' | '\\r' ) )*

        for (;;)
        {
            int alt3=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA3_0 = this->LA(1);
                if ( (((LA3_0 >= 0x0000) && (LA3_0 <= '\t')) || ((LA3_0 >= 0x000B) && (LA3_0 <= '\f')) || ((LA3_0 >= 0x000E) && (LA3_0 <= 0xFFFF))))
                {
                    alt3=1;
                }

            }
            switch (alt3)
            {
        	case 1:
        	    // artilib\\grammars\\featurelang.g:
        	    {
        	        if ( ((this->LA(1) >= 0x0000) && (this->LA(1) <= '\t')) || ((this->LA(1) >= 0x000B) && (this->LA(1) <= '\f')) || ((this->LA(1) >= 0x000E) && (this->LA(1) <= 0xFFFF)) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< featurelangLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleCOMMENTEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop3;	/* break out of the loop */
        	    break;
            }
        }
        loop3: ; /* Jump out to here if this rule does not match */


        // artilib\\grammars\\featurelang.g:48:28: ( '\\r' )?
        {
            int alt4=2;
            switch ( this->LA(1) )
            {
                case '\r':
                	{
                		alt4=1;
                	}
                    break;
            }

            switch (alt4)
            {
        	case 1:
        	    // artilib\\grammars\\featurelang.g:48:28: '\\r'
        	    {
        	         this->matchc('\r');
        	        if  (this->hasException())
        	        {
        	            goto ruleCOMMENTEx;
        	        }


        	    }
        	    break;

            }
        }

         this->matchc('\n');
        if  (this->hasException())
        {
            goto ruleCOMMENTEx;
        }


        {
            this->get_state()->get_channel()=HIDDEN;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCOMMENTEx; /* Prevent compiler warnings */
    ruleCOMMENTEx: ;

}
// $ANTLR end COMMENT

//   Comes from: 51:5: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WS
 *
 * Looks to match the characters the constitute the token WS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void featurelangLexer::mWS()
{
    ANTLR_UINT32	_type;
      


    _type	    = WS;


    // artilib\\grammars\\featurelang.g:51:5: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
    // artilib\\grammars\\featurelang.g:51:9: ( ' ' | '\\t' | '\\r' | '\\n' )
    {
        if ( ((this->LA(1) >= '\t') && (this->LA(1) <= '\n')) || this->LA(1) == '\r' || this->LA(1) == ' ' )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< featurelangLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleWSEx;
        }


        {
            this->get_state()->get_channel()=HIDDEN;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleWSEx; /* Prevent compiler warnings */
    ruleWSEx: ;

}
// $ANTLR end WS

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
void
featurelangLexer::mTokens()
{
    {
        //  artilib\\grammars\\featurelang.g:1:8: ( T__8 | T__9 | T__10 | T__11 | T__12 | T__13 | T__14 | T__15 | T__16 | INTEGER | ID | COMMENT | WS )

        ANTLR_UINT32 alt5;

        alt5=13;

        switch ( this->LA(1) )
        {
        case '!':
        	{
        		alt5=1;
        	}
            break;
        case '&':
        	{
        		alt5=2;
        	}
            break;
        case '(':
        	{
        		alt5=3;
        	}
            break;
        case ')':
        	{
        		alt5=4;
        	}
            break;
        case '.':
        	{
        		alt5=5;
        	}
            break;
        case '@':
        	{
        		alt5=6;
        	}
            break;
        case '{':
        	{
        		alt5=7;
        	}
            break;
        case '|':
        	{
        		alt5=8;
        	}
            break;
        case '}':
        	{
        		alt5=9;
        	}
            break;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        	{
        		alt5=10;
        	}
            break;
        case 'A':
        case 'B':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'J':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
        case 'S':
        case 'T':
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
        case '_':
        case 'a':
        case 'b':
        case 'c':
        case 'd':
        case 'e':
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'l':
        case 'm':
        case 'n':
        case 'o':
        case 'p':
        case 'q':
        case 'r':
        case 's':
        case 't':
        case 'u':
        case 'v':
        case 'w':
        case 'x':
        case 'y':
        case 'z':
        	{
        		alt5=11;
        	}
            break;
        case '/':
        	{
        		alt5=12;
        	}
            break;
        case '\t':
        case '\n':
        case '\r':
        case ' ':
        	{
        		alt5=13;
        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< featurelangLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 5 );
            ex->set_state( 0 );


            goto ruleTokensEx;

        }

        switch (alt5)
        {
    	case 1:
    	    // artilib\\grammars\\featurelang.g:1:10: T__8
    	    {
    	        /* 1:10: T__8 */
    	        mT__8();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // artilib\\grammars\\featurelang.g:1:15: T__9
    	    {
    	        /* 1:15: T__9 */
    	        mT__9();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // artilib\\grammars\\featurelang.g:1:20: T__10
    	    {
    	        /* 1:20: T__10 */
    	        mT__10();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 4:
    	    // artilib\\grammars\\featurelang.g:1:26: T__11
    	    {
    	        /* 1:26: T__11 */
    	        mT__11();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 5:
    	    // artilib\\grammars\\featurelang.g:1:32: T__12
    	    {
    	        /* 1:32: T__12 */
    	        mT__12();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 6:
    	    // artilib\\grammars\\featurelang.g:1:38: T__13
    	    {
    	        /* 1:38: T__13 */
    	        mT__13();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 7:
    	    // artilib\\grammars\\featurelang.g:1:44: T__14
    	    {
    	        /* 1:44: T__14 */
    	        mT__14();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 8:
    	    // artilib\\grammars\\featurelang.g:1:50: T__15
    	    {
    	        /* 1:50: T__15 */
    	        mT__15();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 9:
    	    // artilib\\grammars\\featurelang.g:1:56: T__16
    	    {
    	        /* 1:56: T__16 */
    	        mT__16();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 10:
    	    // artilib\\grammars\\featurelang.g:1:62: INTEGER
    	    {
    	        /* 1:62: INTEGER */
    	        mINTEGER();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 11:
    	    // artilib\\grammars\\featurelang.g:1:70: ID
    	    {
    	        /* 1:70: ID */
    	        mID();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 12:
    	    // artilib\\grammars\\featurelang.g:1:73: COMMENT
    	    {
    	        /* 1:73: COMMENT */
    	        mCOMMENT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 13:
    	    // artilib\\grammars\\featurelang.g:1:81: WS
    	    {
    	        /* 1:81: WS */
    	        mWS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;

        }
    }


    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */



/* End of code
 * =============================================================================
 */
